import {
  Box,
  Button,
  Center,
  Container,
  Divider,
  FormControl,
  FormErrorMessage,
  FormHelperText,
  FormLabel,
  Heading,
  Input,
  InputGroup,
  InputLeftAddon,
  Textarea,
} from "@chakra-ui/react";
import { Router, useRouter } from "next/router";
import { useEffect, useMemo, useState } from "react";
import { verifyHandleid } from "../../scripts/user/handleid";

export default function InitProfile() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [handleid, setHandleid] = useState("");
  const [username, setUsername] = useState("");
  const [bio, setBio] = useState("");
  const [isHandleid, setIsHandleid] = useState(false);
  // Generated by ChatGPT
  // スペース、Unicode空白文字(透明文字)が先頭、最後に含まれていないこと、文字数が空白ではないこと
  const isUsername =
    /^(?!\s)(?!\p{C})(?!(\s|\p{C}|\p{Zs})*$).+(?<!\s)(?<!\p{C})(?<!\p{Zs})$/u.test(
      username
    );
  async function checkverify(idvalue: string) {
    const result = await verifyHandleid(idvalue);
    console.log(result);
    setIsHandleid(result);
  }
  let moveTo;
  if (typeof window !== "undefined")
    var queryTo = new URLSearchParams(window.location.search).get("moveto");
  moveTo = queryTo ? queryTo : moveTo;

  function saveProfile() {
    setLoading(false);
    fetch("/api/profile/init", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: username,
        disp_handleid: handleid,
        bio: bio,
      }),
    })
      .then((response) => {
        response.json();
        if (response.status === 200) {
          // レスポンスが202の場合に実行するコードをここに記述する
          router.replace(moveTo ? moveTo : "/dashboard");
        } else {
          // 202以外の場合に実行するコードをここに記述する
        }
      })
      .then((data) => console.log(data))
      .catch((error) => console.error(error));
  }

  useEffect(() => {
    checkverify(handleid);
  }, [handleid]);
  useEffect(() => {
    function checkAlready() {
      fetch("/api/profile/init")
        .then((response) => {
          response.json();
          if (response.status === 200) {
            // レスポンスが202の場合に実行するコードをここに記述する
            router.replace(moveTo ? moveTo : "/profile/edit");
          } else {
            // 202以外の場合に実行するコードをここに記述する
          }
        })
        .then((data) => console.log(data))
        .catch((error) => console.error(error));
    }
    checkAlready();
  }, []);

  return (
    <>
      <Container>
        <Heading>Initialize Profile</Heading>
        <Divider />
        <FormControl isInvalid={!isHandleid} mt="4">
          <FormLabel mb="0">HandleID (You can change it anytime)</FormLabel>
          <FormHelperText mt="0">
            Must be at least 6 characters long, must not contain any spaces
          </FormHelperText>
          <InputGroup>
            <InputLeftAddon children="@" />
            <Input
              type="text"
              value={handleid}
              onChange={(e) => setHandleid(e.target.value)}
            />
          </InputGroup>
          {isHandleid ? (
            <FormHelperText>Yeah! Your handleID is ready!</FormHelperText>
          ) : (
            <FormErrorMessage>
              You can't use this handleID. <br />
              Contact to @ColocaSupport if you are inneed
            </FormErrorMessage>
          )}
        </FormControl>
        <FormControl isInvalid={!isUsername} mt="5">
          <FormLabel>Username</FormLabel>
          <Input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          {isUsername ? null : (
            <FormErrorMessage>You can't leave username blank.</FormErrorMessage>
          )}
        </FormControl>
        <FormControl isInvalid={false} mt="5">
          <FormLabel mb="0">Bio</FormLabel>
          <FormHelperText mt="0">Describe yourself!</FormHelperText>
          <Textarea
            value={bio}
            onChange={(e) => setBio(e.target.value)}
            rows={4}
            maxLength={300}
          />
        </FormControl>
        <Button
          mt="4"
          colorScheme={isHandleid && isUsername ? "teal" : "gray"}
          isDisabled={!(isHandleid && isUsername)}
          width="100%"
          onClick={() => saveProfile()}
        >
          Save and Explore Coloca!
        </Button>
      </Container>
    </>
  );
}
